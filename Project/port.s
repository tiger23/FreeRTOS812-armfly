; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c -S -o.\port.s --depend=.\port.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CORTEX_STM32F103_Keil -I..\bsp -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\MemMang -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\FreeRTOS\Common\include -I..\app -If:\Keil\ARM\RV31\INC -If:\Keil\ARM\CMSIS\Include -IDevice\Include -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\port.crf ..\FreeRTOS\Source\portable\RVDS\ARM_CM3\port.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

prvTaskExitError PROC
        BL       ulPortSetInterruptMask
        NOP      
|L0.6|
        B        |L0.6|
        ENDP

pxPortInitialiseStack PROC
        SUBS     r0,r0,#4
        MOV      r3,#0x1000000
        STR      r3,[r0,#0]
        SUBS     r0,r0,#4
        STR      r1,[r0,#0]
        SUBS     r0,r0,#4
        LDR      r3,|L0.196|
        STR      r3,[r0,#0]
        SUBS     r0,r0,#0x14
        STR      r2,[r0,#0]
        SUBS     r0,r0,#0x20
        BX       lr
        ENDP

vPortSetupTimerInterrupt PROC
        LDR      r0,|L0.200|
        MOV      r1,#0xe000e000
        STR      r0,[r1,#0x14]
        MOVS     r0,#7
        STR      r0,[r1,#0x10]
        BX       lr
        ENDP

xPortStartScheduler PROC
        PUSH     {r4,lr}
        LDR      r0,|L0.204|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0xff0000
        LDR      r1,|L0.204|
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0xff000000
        STR      r0,[r1,#0]
        BL       vPortSetupTimerInterrupt
        MOVS     r0,#0
        LDR      r1,|L0.208|
        STR      r0,[r1,#0]  ; uxCriticalNesting
        BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

vPortEndScheduler PROC
        BX       lr
        ENDP

vPortYield PROC
        MOV      r0,#0x10000000
        LDR      r1,|L0.204|
        SUBS     r1,r1,#0x1c
        STR      r0,[r1,#0]
        DSB      
        ISB      
        BX       lr
        ENDP

vPortEnterCritical PROC
        PUSH     {r4,lr}
        BL       ulPortSetInterruptMask
        LDR      r0,|L0.208|
        LDR      r0,[r0,#0]  ; uxCriticalNesting
        ADDS     r0,r0,#1
        LDR      r1,|L0.208|
        STR      r0,[r1,#0]  ; uxCriticalNesting
        DSB      
        ISB      
        POP      {r4,pc}
        ENDP

vPortExitCritical PROC
        PUSH     {r4,lr}
        LDR      r0,|L0.208|
        LDR      r0,[r0,#0]  ; uxCriticalNesting
        SUBS     r0,r0,#1
        LDR      r1,|L0.208|
        STR      r0,[r1,#0]  ; uxCriticalNesting
        MOV      r0,r1
        LDR      r0,[r0,#0]  ; uxCriticalNesting
        CBNZ     r0,|L0.162|
        MOVS     r0,#0
        BL       vPortClearInterruptMask
|L0.162|
        POP      {r4,pc}
        ENDP

xPortSysTickHandler PROC
        PUSH     {r4,lr}
        BL       ulPortSetInterruptMask
        BL       xTaskIncrementTick
        CBZ      r0,|L0.186|
        MOV      r0,#0x10000000
        LDR      r1,|L0.204|
        SUBS     r1,r1,#0x1c
        STR      r0,[r1,#0]
|L0.186|
        MOVS     r0,#0
        BL       vPortClearInterruptMask
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L0.196|
        DCD      prvTaskExitError
|L0.200|
        DCD      0x0001193f
|L0.204|
        DCD      0xe000ed20
|L0.208|
        DCD      uxCriticalNesting

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=2

uxCriticalNesting
        DCD      0xaaaaaaaa

;*** Start embedded assembler ***

#line 1 "..\\FreeRTOS\\Source\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d____REV16|
#line 129 "f:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_port_c_39a90d8d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d____REVSH|
#line 144
|__asm___6_port_c_39a90d8d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortSVCHandler|
#line 245 "..\\FreeRTOS\\Source\\portable\\RVDS\\ARM_CM3\\port.c"
|vPortSVCHandler| PROC
#line 246

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 262
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 263

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]
 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |xPortPendSVHandler|
#line 402
|xPortPendSVHandler| PROC
#line 403


 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #191
 msr basepri, r0
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |ulPortSetInterruptMask|
#line 635
|ulPortSetInterruptMask| PROC
#line 636

 PRESERVE8

 mrs r0, basepri
 mov r1, #191
 msr basepri, r1
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortClearInterruptMask|
#line 646
|vPortClearInterruptMask| PROC
#line 647

 PRESERVE8

 msr basepri, r0
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortGetIPSR|
#line 655
|vPortGetIPSR| PROC
#line 656

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***

        EXPORT pxPortInitialiseStack [CODE]
        EXPORT vPortSetupTimerInterrupt [CODE]
        EXPORT xPortStartScheduler [CODE]
        EXPORT vPortEndScheduler [CODE]
        EXPORT vPortYield [CODE]
        EXPORT vPortEnterCritical [CODE]
        EXPORT vPortExitCritical [CODE]
        EXPORT xPortSysTickHandler [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT xTaskIncrementTick [CODE]

        KEEP prvTaskExitError
        KEEP uxCriticalNesting

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
